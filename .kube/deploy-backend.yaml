apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  selector:
   matchLabels:
    app: app-backend
  replicas: 1
  template:
    metadata:
      labels:
        app: app-backend
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: In
                values:
                - backend
      containers:
        - name: backend
          image: rust-postgres-backend:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-username
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: PG_DBNAME
              valueFrom:
                configMapKeyRef:
                  name: postgres-configmap
                  key: postgres-dbname
            - name: HTTP_SERVER_ADDRESS
              value: 0.0.0.0:8000 #MC4wLjAuMDo4MDAw
            - name: GRPC_SERVER_ADDRESS
              value: 0.0.0.0:9000 #MC4wLjAuMDo5MDAw
          #  - name: RUST_LOG
          #    value: debug
            - name: PG_AUTHORITY_MASTER
              value: db:5432 #ZGI6NTQzMg==
            - name: PG_AUTHORITY_REPLICA
              value: dbreplica1:5432,dbreplica2:5432 #ZGJyZXBsaWNhMTo1NDMyLGRicmVwbGljYTI6NTQzMg==
            - name: PG_MASTER_POOL_MAX_SIZE
              value: "300" #MzAw
            - name: PG_REPLICA_POOL_MAX_SIZE
              value: "900" #OTAw
          volumeMounts:
            # - mountPath: /code/src
            #   name: backend-storage
            - mountPath: /code/target
              name: backend-storage
      volumes:
        - name: backend-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim-backend
---
    kind: PersistentVolume
    apiVersion: v1
    metadata:
      name: postgres-pv-volume-backend
      labels:
        type: local
    spec:
      storageClassName: manual
      claimRef:
        name: postgres-pv-claim-backend
        namespace: default
      capacity:
        storage: 2Gi
      accessModes:
        - ReadWriteMany
      hostPath:
        path: "/mnt/data/backend"
---
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: postgres-pv-claim-backend
    spec:
      storageClassName: manual
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi
---
    apiVersion: v1
    kind: Service
    metadata:
      name: backend
    spec:
      ports:
        - port: 8000
          targetPort: 8000
      selector:
        app: app-backend