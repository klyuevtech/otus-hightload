networks:
  backend:
  server-side:
    name: server-side

services:
  dialogs:
    build:
      context: ./proxy
    depends_on:
      - dialogs01
      - dialogs02
    networks:
      - server-side

  dialogs01:
    build:
      context: .
      target: development
    environment:
      - HTTP_SERVER_ADDRESS=0.0.0.0:8000
      - RUST_LOG=debug
      - PG_DBNAME=postgres
      - PG_AUTHORITY_MASTER=haproxy:5000
      - PG_AUTHORITY_REPLICA=haproxy:5001
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_MASTER_POOL_MAX_SIZE=100
      - PG_REPLICA_POOL_MAX_SIZE=300
      - SELF_HOST_NAME=dialogs01
    networks: [ backend, server-side ]

    # ports:
      # - 8001:8000
      # - 9000:9000
    volumes:
      - ./src:/code/src
      - backend-cache:/code/target
    depends_on:
      - haproxy

  dialogs02:
    build:
      context: .
      target: development
    environment:
      - HTTP_SERVER_ADDRESS=0.0.0.0:8000
      - RUST_LOG=debug
      - PG_DBNAME=postgres
      - PG_AUTHORITY_MASTER=haproxy:5000
      - PG_AUTHORITY_REPLICA=haproxy:5001
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_MASTER_POOL_MAX_SIZE=100
      - PG_REPLICA_POOL_MAX_SIZE=300
      - SELF_HOST_NAME=dialogs02
    networks: [ backend, server-side ]

    # ports:
      # - 8001:8000
      # - 9000:9000
    volumes:
      - ./src:/code/src
      - backend-cache:/code/target
    depends_on:
      - haproxy

  etcd1: &etcd
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      environment:
          ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
          ETCD_INITIAL_CLUSTER_STATE: new
          ETCD_INITIAL_CLUSTER_TOKEN: tutorial
          ETCD_UNSUPPORTED_ARCH: arm64
      container_name: backend-etcd1
      hostname: etcd1
      command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
      <<: *etcd
      container_name: backend-etcd2
      hostname: etcd2
      command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  etcd3:
      <<: *etcd
      container_name: backend-etcd3
      hostname: etcd3
      command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380

  haproxy:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: haproxy
      container_name: backend-haproxy
      # ports:
      #     - "5001:5000"  # Access to the coorinator primary
      #     - "5002:5001"  # Load-balancing across workers primaries
      command: haproxy
      environment: &haproxy_env
          ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
          PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
          PATRONI_SCOPE: backend
          PATRONI_CITUS_GROUP: 0
          PATRONI_CITUS_DATABASE: citus
          PGSSLMODE: verify-ca
          PGSSLKEY: /etc/ssl/private/ssl-cert-snakeoil.key
          PGSSLCERT: /etc/ssl/certs/ssl-cert-snakeoil.pem
          PGSSLROOTCERT: /etc/ssl/certs/ssl-cert-snakeoil.pem

  coord1:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: coord1
      container_name: backend-coord1
      environment: &coord_env
          <<: *haproxy_env
          PATRONI_NAME: coord1
          PATRONI_CITUS_GROUP: 0

  coord2:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: coord2
      container_name: backend-coord2
      environment:
          <<: *coord_env
          PATRONI_NAME: coord2

  coord3:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: coord3
      container_name: backend-coord3
      environment:
          <<: *coord_env
          PATRONI_NAME: coord3


  work1-1:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: work1-1
      container_name: backend-work1-1
      environment: &work1_env
          <<: *haproxy_env
          PATRONI_NAME: work1-1
          PATRONI_CITUS_GROUP: 1

  work1-2:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: work1-2
      container_name: backend-work1-2
      environment:
          <<: *work1_env
          PATRONI_NAME: work1-2


  work2-1:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: work2-1
      container_name: backend-work2-1
      environment: &work2_env
          <<: *haproxy_env
          PATRONI_NAME: work2-1
          PATRONI_CITUS_GROUP: 2

  work2-2:
      image: ${PATRONI_TEST_IMAGE:-patroni-citus}
      networks: [ backend ]
      env_file: docker/patroni.env
      hostname: work2-2
      container_name: backend-work2-2
      environment:
          <<: *work2_env
          PATRONI_NAME: work2-2

volumes:
  backend-cache: {}
